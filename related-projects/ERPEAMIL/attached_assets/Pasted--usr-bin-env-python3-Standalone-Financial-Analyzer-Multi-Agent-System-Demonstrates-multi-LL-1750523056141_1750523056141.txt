#!/usr/bin/env python3
"""
Standalone Financial Analyzer Multi-Agent System
Demonstrates multi-LLM financial analysis without A2A framework dependencies
"""

import os
import datetime
import pandas as pd
from typing import Dict, List
import json

# --- Configuration ---
OUTPUT_FILE_NAME = "financial_analysis_report.md"
ANALYSIS_TOPIC = "comprehensive financial analysis of property management data for 2023-2024"

# Financial data file paths
INCOME_STATEMENT_FILE = "pm_gl_monthly_income_2023_2024.csv"
BALANCE_SHEET_FILE = "pm_gl_monthly_balance_2023_2024.csv"
CASH_FLOW_FILE = "pm_gl_monthly_cashflow_2023_2024.csv"

# --- Financial Data Processing Classes ---
class FinancialDataLoader:
    """Loads and processes financial data from CSV files."""
    
    def __init__(self):
        self.income_statement = None
        self.balance_sheet = None
        self.cash_flow = None
        
    def load_all_data(self) -> bool:
        """Load all financial statements."""
        try:
            self.income_statement = pd.read_csv(INCOME_STATEMENT_FILE)
            self.balance_sheet = pd.read_csv(BALANCE_SHEET_FILE)
            self.cash_flow = pd.read_csv(CASH_FLOW_FILE)
            return True
        except Exception as e:
            print(f"Error loading financial data: {e}")
            return False
    
    def get_income_statement_summary(self) -> str:
        """Generate summary of income statement data."""
        if self.income_statement is None:
            return "Income statement data not loaded."
        
        summary = f"Income Statement Data (24 months: 2023-2024)\n"
        summary += f"Number of accounts: {len(self.income_statement)}\n"
        summary += f"Key revenue accounts: Rent-Residential, Rent-Commercial\n"
        summary += f"Major expense categories: Management, Payroll, Utilities, Maintenance\n"
        
        # Calculate total revenue and expenses for latest month
        latest_month = '2024-12'
        if latest_month in self.income_statement.columns:
            revenue_accounts = ['4000', '4005', '4100', '4110', '4200', '4300', '4400']
            expense_accounts = ['5000', '5100', '5200', '5210', '5300', '5310', '5400', '5500', '5600', '5700', '6000', '6100']
            
            total_revenue = 0
            total_expenses = 0
            
            for _, row in self.income_statement.iterrows():
                account = str(row['GL Account'])
                value = row.get(latest_month, 0)
                if account in revenue_accounts:
                    total_revenue += value
                elif account in expense_accounts:
                    total_expenses += abs(value)  # Expenses are negative
            
            net_income = total_revenue - total_expenses
            summary += f"\nLatest Month ({latest_month}):\n"
            summary += f"Total Revenue: ${total_revenue:,.2f}\n"
            summary += f"Total Expenses: ${total_expenses:,.2f}\n"
            summary += f"Net Income: ${net_income:,.2f}\n"
        
        return summary
    
    def get_balance_sheet_summary(self) -> str:
        """Generate summary of balance sheet data."""
        if self.balance_sheet is None:
            return "Balance sheet data not loaded."
        
        summary = f"Balance Sheet Data (24 months: 2023-2024)\n"
        summary += f"Number of accounts: {len(self.balance_sheet)}\n"
        
        # Calculate key totals for latest month
        latest_month = '2024-12'
        if latest_month in self.balance_sheet.columns:
            assets = 0
            liabilities = 0
            equity = 0
            
            for _, row in self.balance_sheet.iterrows():
                account = str(row['GL Account'])
                value = row.get(latest_month, 0)
                
                if account.startswith('1'):  # Assets
                    assets += value
                elif account.startswith('2'):  # Liabilities
                    liabilities += abs(value)
                elif account.startswith('3'):  # Equity
                    equity += value
            
            summary += f"\nLatest Month ({latest_month}):\n"
            summary += f"Total Assets: ${assets:,.2f}\n"
            summary += f"Total Liabilities: ${liabilities:,.2f}\n"
            summary += f"Total Equity: ${equity:,.2f}\n"
            if equity != 0:
                summary += f"Debt-to-Equity Ratio: {liabilities/equity:.2f}\n"
        
        return summary
    
    def get_cash_flow_summary(self) -> str:
        """Generate summary of cash flow data."""
        if self.cash_flow is None:
            return "Cash flow data not loaded."
        
        summary = f"Cash Flow Data (24 months: 2023-2024)\n"
        summary += f"Number of line items: {len(self.cash_flow)}\n"
        
        # Calculate cash flow metrics for latest month
        latest_month = '2024-12'
        if latest_month in self.cash_flow.columns:
            net_income = 0
            depreciation = 0
            capex = 0
            debt_payments = 0
            distributions = 0
            
            for _, row in self.cash_flow.iterrows():
                account = str(row['GL Account'])
                value = row.get(latest_month, 0)
                
                if account == '9999':  # Net Income
                    net_income = value
                elif account == '6000':  # Depreciation
                    depreciation = value
                elif account == '5200':  # CapEx
                    capex = abs(value)
                elif account == '2100':  # Debt payments
                    debt_payments = abs(value)
                elif account == '3000':  # Distributions
                    distributions = abs(value)
            
            free_cash_flow = net_income + depreciation - capex
            
            summary += f"\nLatest Month ({latest_month}):\n"
            summary += f"Net Income: ${net_income:,.2f}\n"
            summary += f"Depreciation: ${depreciation:,.2f}\n"
            summary += f"Capital Expenditures: ${capex:,.2f}\n"
            summary += f"Free Cash Flow: ${free_cash_flow:,.2f}\n"
            summary += f"Debt Payments: ${debt_payments:,.2f}\n"
            summary += f"Owner Distributions: ${distributions:,.2f}\n"
        
        return summary

    def calculate_financial_ratios(self) -> Dict:
        """Calculate key financial ratios across all periods."""
        ratios = {}
        
        if self.income_statement is not None and self.balance_sheet is not None:
            # Calculate monthly ratios for trend analysis
            monthly_ratios = []
            
            for col in self.income_statement.columns[3:]:  # Skip GL Account, Description, first month
                if col in self.balance_sheet.columns:
                    # Revenue and expense totals
                    revenue_accounts = ['4000', '4005', '4100', '4110', '4200', '4300', '4400']
                    expense_accounts = ['5000', '5100', '5200', '5210', '5300', '5310', '5400', '5500', '5600', '5700', '6000', '6100']
                    
                    total_revenue = 0
                    total_expenses = 0
                    
                    for _, row in self.income_statement.iterrows():
                        account = str(row['GL Account'])
                        value = row.get(col, 0)
                        if account in revenue_accounts:
                            total_revenue += value
                        elif account in expense_accounts:
                            total_expenses += abs(value)
                    
                    # Balance sheet totals
                    total_assets = 0
                    total_liabilities = 0
                    total_equity = 0
                    
                    for _, row in self.balance_sheet.iterrows():
                        account = str(row['GL Account'])
                        value = row.get(col, 0)
                        
                        if account.startswith('1'):  # Assets
                            total_assets += value
                        elif account.startswith('2'):  # Liabilities
                            total_liabilities += abs(value)
                        elif account.startswith('3'):  # Equity
                            total_equity += value
                    
                    # Calculate ratios
                    net_income = total_revenue - total_expenses
                    roi = (net_income / total_assets * 100) if total_assets > 0 else 0
                    debt_to_equity = (total_liabilities / total_equity) if total_equity > 0 else 0
                    profit_margin = (net_income / total_revenue * 100) if total_revenue > 0 else 0
                    
                    monthly_ratios.append({
                        'period': col,
                        'revenue': total_revenue,
                        'expenses': total_expenses,
                        'net_income': net_income,
                        'total_assets': total_assets,
                        'total_liabilities': total_liabilities,
                        'total_equity': total_equity,
                        'roi': roi,
                        'debt_to_equity': debt_to_equity,
                        'profit_margin': profit_margin
                    })
            
            ratios['monthly_trends'] = monthly_ratios
        
        return ratios

class MockAnalyst:
    """Mock analyst class to simulate multi-LLM analysis without API dependencies."""
    
    def __init__(self, name: str, role: str, description: str):
        self.name = name
        self.role = role
        self.description = description
    
    def analyze(self, data_summary: str, context: str = "") -> str:
        """Generate mock analysis based on agent specialization."""
        
        if "Income" in self.role:
            return self._generate_income_analysis(data_summary)
        elif "Balance" in self.role:
            return self._generate_balance_analysis(data_summary)
        elif "Cash Flow" in self.role:
            return self._generate_cashflow_analysis(data_summary)
        elif "Strategic" in self.role:
            return self._generate_strategic_analysis(data_summary, context)
        else:
            return f"Analysis from {self.name}: {data_summary[:200]}..."
    
    def _generate_income_analysis(self, data: str) -> str:
        return f"""**Income Statement Analysis by {self.name}**

Based on the property management income statement data, I observe the following key trends:

**Revenue Analysis:**
- Residential rent revenue shows steady growth from $200K to $206K over the 24-month period
- Commercial rent revenue grew from $80K to $82.5K, indicating healthy demand
- Ancillary income streams (parking, storage, late fees) provide stable supplementary revenue
- Total revenue growth demonstrates strong market positioning

**Expense Management:**
- Management fees are well-controlled at 3% of revenue
- Payroll expenses show reasonable increases aligned with inflation
- Maintenance and repair costs indicate proactive property management
- Utility costs appear stable with seasonal variations

**Profitability Insights:**
- Net Operating Income (NOI) trends are positive
- Operating margins remain healthy throughout the period
- Revenue diversification reduces risk exposure
- Expense ratios are within industry benchmarks

**Key Recommendations:**
- Continue focus on rent optimization strategies
- Monitor maintenance expenses for any emerging patterns
- Explore opportunities for additional revenue streams
- Implement energy efficiency measures to control utility costs
"""
    
    def _generate_balance_analysis(self, data: str) -> str:
        return f"""**Balance Sheet Analysis by {self.name}**

Analysis of the property management balance sheet reveals the following financial position:

**Asset Management:**
- Total assets of approximately $11.6M with land and building comprising majority
- Cash position of $780K-832K provides good liquidity buffer
- Accounts receivable are reasonable with appropriate allowances
- Asset base has grown 4% from 2023 to 2024

**Capital Structure:**
- Debt-to-equity ratio of approximately 2.0:1 indicates moderate leverage
- Long-term debt of $7.28M represents primary financing source
- Partner capital has increased, showing investor confidence
- Retained earnings demonstrate accumulated profitability

**Liquidity Assessment:**
- Operating cash provides sufficient working capital
- Reserve funds of $52K available for contingencies
- Current ratio appears adequate for operations
- No immediate liquidity concerns identified

**Strategic Observations:**
- Conservative capital structure supports stability
- Asset appreciation potential remains strong
- Leverage levels are manageable and appropriate
- Financial position supports growth opportunities

**Recommendations:**
- Monitor debt service coverage ratios closely
- Consider refinancing opportunities if rates improve
- Maintain adequate cash reserves for capital improvements
- Evaluate optimal capital structure for expansion
"""
    
    def _generate_cashflow_analysis(self, data: str) -> str:
        return f"""**Cash Flow Analysis by {self.name}**

Cash flow analysis reveals strong operational cash generation with strategic capital allocation:

**Operating Cash Flow:**
- Net income trends from $100K to $110K monthly demonstrate growth
- Free cash flow after capital expenditures remains positive
- Depreciation provides non-cash tax benefits of $35K+ monthly
- Operating cash conversion is efficient

**Investment Activities:**
- Capital expenditures of $80K+ monthly indicate active property improvement
- Investment levels are appropriate for property maintenance and enhancement
- CapEx spending supports long-term asset value preservation
- No major expansion investments noted in current period

**Financing Activities:**
- Regular debt principal payments of $50K+ monthly show disciplined deleveraging
- Owner distributions of $15K monthly provide reasonable investor returns
- Debt service coverage appears adequate based on operating cash flows
- Conservative financing approach maintains financial flexibility

**Cash Generation Quality:**
- Strong correlation between reported earnings and cash generation
- Sustainable cash flow patterns support long-term viability
- Distribution capacity remains healthy relative to free cash flow
- Working capital management appears efficient

**Strategic Recommendations:**
- Continue disciplined capital allocation approach
- Evaluate opportunities for accretive investments
- Monitor interest rate environment for refinancing opportunities
- Maintain distribution policy aligned with sustainable cash generation
"""
    
    def _generate_strategic_analysis(self, data: str, context: str) -> str:
        return f"""**Strategic Financial Synthesis by {self.name}**

After reviewing comprehensive analyses from all financial perspectives, the following strategic assessment emerges:

**Integrated Financial Health Assessment:**
- Property demonstrates strong financial fundamentals across all metrics
- Revenue growth, expense control, and cash generation are well-aligned
- Balance sheet structure supports current operations and future growth
- Financial metrics indicate a well-managed, profitable real estate investment

**Key Strategic Themes:**
1. **Sustainable Growth**: Revenue growth outpacing expense increases
2. **Operational Excellence**: Efficient expense management and high occupancy
3. **Capital Discipline**: Balanced approach to investment and distributions
4. **Financial Stability**: Conservative leverage with strong cash generation

**Critical Success Factors:**
- Continued market demand for both residential and commercial space
- Proactive maintenance strategy preserving asset value
- Effective tenant relations minimizing vacancy losses
- Disciplined financial management maintaining healthy ratios

**Strategic Recommendations (Priority Order):**

**Immediate Actions (0-3 months):**
- Implement quarterly financial dashboard for key metrics monitoring
- Review rent roll for optimization opportunities
- Evaluate energy efficiency improvements for utility cost reduction

**Short-term Initiatives (3-12 months):**
- Develop 5-year capital improvement plan
- Assess market positioning relative to comparable properties
- Consider technology investments for operational efficiency

**Long-term Strategic Options (1-3 years):**
- Evaluate expansion or acquisition opportunities
- Consider property value enhancement through strategic improvements
- Assess optimal long-term capital structure

**Risk Mitigation:**
- Maintain adequate cash reserves for market volatility
- Monitor local market conditions and competitive landscape
- Diversify tenant base to reduce concentration risk
- Stay current with regulatory and environmental requirements

**Performance Targets:**
- Maintain NOI growth of 3-5% annually
- Keep expense ratios below industry benchmarks
- Target debt service coverage ratio above 1.25x
- Preserve cash flow sustainability for distributions

This property represents a well-positioned real estate investment with strong fundamentals and clear strategic opportunities for continued value creation.
"""

def main():
    """Main execution function for standalone financial analyzer."""
    print("=" * 80)
    print("FINANCIAL ANALYZER MULTI-AGENT SYSTEM (STANDALONE)")
    print("=" * 80)
    print("Starting comprehensive financial analysis...\n")

    # 1. Load Financial Data
    print("Loading financial data...")
    data_loader = FinancialDataLoader()
    if not data_loader.load_all_data():
        print("Failed to load financial data. Please check CSV files exist.")
        return
    
    print("Financial data loaded successfully.")
    print("\n" + "=" * 60)
    print("FINANCIAL DATA OVERVIEW")
    print("=" * 60)
    print(data_loader.get_income_statement_summary())
    print("\n" + "-" * 40)
    print(data_loader.get_balance_sheet_summary())
    print("\n" + "-" * 40)
    print(data_loader.get_cash_flow_summary())
    
    # Calculate financial ratios
    print("\n" + "-" * 40)
    print("CALCULATING FINANCIAL RATIOS...")
    ratios = data_loader.calculate_financial_ratios()
    if ratios.get('monthly_trends'):
        latest_ratios = ratios['monthly_trends'][-1]
        print(f"Latest Period Financial Ratios:")
        print(f"Return on Assets: {latest_ratios['roi']:.2f}%")
        print(f"Debt-to-Equity: {latest_ratios['debt_to_equity']:.2f}")
        print(f"Profit Margin: {latest_ratios['profit_margin']:.2f}%")
    
    print("=" * 60 + "\n")

    # 2. Initialize Mock Analysts (simulating 4 different LLMs)
    print("Initializing financial analysis agents...")
    
    income_analyst = MockAnalyst(
        name="IncomeAnalyst",
        role="Income Statement Analyst", 
        description="Specializes in revenue trends, expense patterns, and profitability analysis"
    )
    
    balance_analyst = MockAnalyst(
        name="BalanceAnalyst",
        role="Balance Sheet Analyst",
        description="Expert in asset management, capital structure, and financial position"
    )
    
    cashflow_analyst = MockAnalyst(
        name="CashFlowAnalyst", 
        role="Cash Flow Analyst",
        description="Focused on cash generation, investment patterns, and financing activities"
    )
    
    strategic_advisor = MockAnalyst(
        name="StrategicAdvisor",
        role="Strategic Financial Advisor",
        description="Synthesizes insights and provides comprehensive recommendations"
    )
    
    agents = [income_analyst, balance_analyst, cashflow_analyst, strategic_advisor]
    print(f"Agents initialized: {', '.join([agent.name for agent in agents])}\n")

    # 3. Execute Multi-Round Financial Analysis
    print(f"--- Starting Financial Analysis: {ANALYSIS_TOPIC} ---\n")
    
    # Prepare financial data summaries for agents
    income_data = data_loader.get_income_statement_summary()
    balance_data = data_loader.get_balance_sheet_summary()
    cashflow_data = data_loader.get_cash_flow_summary()
    
    analysis_results = {}
    
    # ROUND 1: Initial Domain-Specific Analysis
    print("=" * 80)
    print("ROUND 1: INITIAL DOMAIN-SPECIFIC ANALYSIS")
    print("=" * 80)
    
    print(f"\n{income_analyst.name} is analyzing income statement data...")
    income_analysis = income_analyst.analyze(income_data)
    analysis_results['income'] = income_analysis
    print(income_analysis)
    
    print(f"\n{balance_analyst.name} is analyzing balance sheet data...")
    balance_analysis = balance_analyst.analyze(balance_data, income_analysis[:300])
    analysis_results['balance'] = balance_analysis
    print(balance_analysis)
    
    print(f"\n{cashflow_analyst.name} is analyzing cash flow data...")
    cashflow_analysis = cashflow_analyst.analyze(cashflow_data, 
                                                 f"Income context: {income_analysis[:200]}\n"
                                                 f"Balance context: {balance_analysis[:200]}")
    analysis_results['cashflow'] = cashflow_analysis
    print(cashflow_analysis)
    
    # ROUND 2: Strategic Integration
    print("\n" + "=" * 80)
    print("ROUND 2: STRATEGIC INTEGRATION")
    print("=" * 80)
    
    print(f"\n{strategic_advisor.name} is developing strategic synthesis...")
    strategic_context = f"Income Analysis: {income_analysis[:300]}\n" \
                       f"Balance Analysis: {balance_analysis[:300]}\n" \
                       f"Cash Flow Analysis: {cashflow_analysis[:300]}"
    
    strategic_synthesis = strategic_advisor.analyze("", strategic_context)
    analysis_results['strategic'] = strategic_synthesis
    print(strategic_synthesis)
    
    # 4. Generate Comprehensive Report
    print("\n" + "=" * 80)
    print("GENERATING COMPREHENSIVE REPORT")
    print("=" * 80)
    
    try:
        with open(OUTPUT_FILE_NAME, "w", encoding="utf-8") as f:
            f.write(f"# Financial Analysis Report\n\n")
            f.write(f"**Analysis Topic:** {ANALYSIS_TOPIC}\n")
            f.write(f"**Analysis Date:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**Participating Agents:** {', '.join([agent.name for agent in agents])}\n\n")
            
            f.write(f"## Executive Summary\n\n")
            f.write(f"This comprehensive financial analysis examines 24 months of property management data "
                   f"across three key financial statements using a multi-agent analytical approach. "
                   f"Each specialized analyst contributed domain expertise to provide a holistic "
                   f"assessment of financial performance, position, and strategic opportunities.\n\n")
            
            f.write(f"## Financial Data Overview\n\n")
            f.write(f"### Income Statement Summary\n```\n{income_data}\n```\n\n")
            f.write(f"### Balance Sheet Summary\n```\n{balance_data}\n```\n\n")
            f.write(f"### Cash Flow Summary\n```\n{cashflow_data}\n```\n\n")
            
            if ratios.get('monthly_trends'):
                f.write(f"### Key Financial Ratios (Latest Period)\n")
                latest = ratios['monthly_trends'][-1]
                f.write(f"- **Return on Assets:** {latest['roi']:.2f}%\n")
                f.write(f"- **Debt-to-Equity Ratio:** {latest['debt_to_equity']:.2f}\n")
                f.write(f"- **Profit Margin:** {latest['profit_margin']:.2f}%\n")
                f.write(f"- **Net Income:** ${latest['net_income']:,.2f}\n\n")
            
            f.write(f"## Detailed Analysis\n\n")
            f.write(f"{analysis_results['income']}\n\n")
            f.write(f"{analysis_results['balance']}\n\n") 
            f.write(f"{analysis_results['cashflow']}\n\n")
            f.write(f"{analysis_results['strategic']}\n\n")
            
            f.write(f"## Conclusion\n\n")
            f.write(f"This multi-agent financial analysis demonstrates a comprehensive approach to "
                   f"property management financial assessment. The integration of specialized analytical "
                   f"perspectives provides stakeholders with actionable insights for strategic decision-making "
                   f"and ongoing financial management.\n\n")
            
            f.write(f"---\n")
            f.write(f"*Report generated by Financial Analyzer Multi-Agent System*\n")
            
        print(f"[SUCCESS] Successfully wrote comprehensive financial analysis to '{OUTPUT_FILE_NAME}'")
    except IOError as e:
        print(f"✗ Error writing to file '{OUTPUT_FILE_NAME}': {e}")
    
    print(f"\n" + "=" * 80)
    print("FINANCIAL ANALYSIS COMPLETE")
    print("=" * 80)
    print(f"[SUCCESS] Analyzed 3 financial statements with 4 specialized agents")
    print(f"[SUCCESS] Completed comprehensive multi-agent analysis")
    print(f"[SUCCESS] Generated strategic recommendations and insights")
    print(f"[SUCCESS] Created professional report: {OUTPUT_FILE_NAME}")
    print(f"[SUCCESS] Calculated key financial ratios and trends")
    print("=" * 80)

if __name__ == "__main__":
    main()